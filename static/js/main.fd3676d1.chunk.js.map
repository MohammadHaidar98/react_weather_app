{"version":3,"sources":["components/weather.js","components/form.js","App.js","index.js"],"names":["weather","props","className","cityname","weatherIcon","temp_celisus","min","temp_min","max","temp_max","description","charAt","toUpperCase","slice","form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","country","target","elements","value","city","fetch","api_call","json","response","setState","sys","main","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","temp_celsius","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd3676d1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './weather.style.css'\r\n\r\nconst weather = (props) => {\r\n    return (\r\n        <div className=\"container \">\r\n           <div className=\"card pt-2\">\r\n           <h1>{props.cityname}</h1>\r\n           <h5 className=\"py-4\">\r\n               <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n           </h5>\r\n            <h1 className=\"py-2\">{props.temp_celisus}&deg;</h1>\r\n            {minmaxTemp(props.temp_min,props.temp_max)}\r\n            <h4 className=\"py-3\">\r\n          {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\nfunction minmaxTemp(min,max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    )\r\n}\r\n\r\nexport default weather\r\n","import React from 'react'\r\nimport './formStyle.css'\r\n\r\nconst form = (props) => {\r\n    \r\n    return (\r\n        //\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n           <form onSubmit={props.loadweather} >\r\n           <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-3\">\r\n                    <input type=\"text\" name=\"city\" autoComplete=\"off\" className=\"form-control\" placeholder=\"City\"\r\n                    \r\n                    ></input>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" name=\"country\" autoComplete=\"off\" className=\"form-control\" placeholder=\"Country\"\r\n                \r\n                ></input>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-center\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n           </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">Please Enter City And Country</div>\r\n    )\r\n};\r\n\r\nexport default form\r\n","import React from 'react'\nimport Weather from './components/weather'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css'\nimport Form from './components/form';\n\n\nconst Api_key=\"639ae731acf84a34df7a47251974d0d5\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n/* api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key} */\n// const App = () => {\n//   const [city,setCity]= useState(\"\");\n//   const [country,setCountry]= useState(\"\");\n//   const [c,setC]= useState(\"\");\n//   const [co,setCo]= useState(\"\");\n//   const [icon,setIcon]= useState();\n//   const [celisus,setCelisus]= useState();\n//   const [temp_max,setTemp_max]= useState();\n//   const [temp_min,setTemp_min]= useState();\n//   const [decription,setdescription]= useState(\"\");\n//   const [error,setError]= useState(false);\n\n//  let calCelisus=(t)=>{\n//   let cell=Math.floor(t-273.15)\n//   return cell;\n//  }\n//  let getIcon=(weicon,rangeId)=>{\n//     switch(true){\n//       case rangeId >=200 && rangeId <=232:\n//         setIcon(weatherIcon.Thunderstorm);\n//         break;\n//       case rangeId >=300 && rangeId <=321:\n//         setIcon(weatherIcon.Drizzle);\n//         break;\n//       case rangeId >=500 && rangeId <=531:\n//         setIcon(weatherIcon.Rain);\n//         break;\n//       case rangeId >=600 && rangeId <=622:\n//         setIcon(weatherIcon.Snow);\n//         break;\n//       case rangeId >=701 && rangeId <=781:\n//         setIcon(weatherIcon.Atmospher);\n//         break;\n//       case rangeId >=800:\n//         setIcon(weatherIcon.Clear);\n//         break;\n//       case rangeId >=801 && rangeId<=804:\n//         setIcon(weatherIcon.Clouds);\n//         break;\n//         default:\n//           setIcon(weatherIcon.Clouds);\n//     }\n//  }\n\n//  let weatherIcon={\n//    Thunderstorm:\"wi-thunderstorm\",\n//    Drizzle:\"wi-sleet\",\n//    Rain:\"wi-storm-showers\",\n//    Snow:\"wi-snow\",\n//    Atmospher:\"wi-fog\",\n//    Clear:\"wi-day-sunny\",\n//    Clouds:\"wi-day-fog\"\n//  }\n//  const GetWeather=async(v1,v2)=>{\n//   // e.preventDefault();\n//    let city=v1;\n//    let country=v2;\n//    if(city && country){\n     \n//    const Api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_key}`); \n//    const response=await Api_call.json();\n//    console.log(response);\n//    setCity(response.name)\n//    setCountry(response.sys.country)\n//    setCelisus(calCelisus(response.main.temp))\n//    setTemp_max(calCelisus(response.main.temp_max))\n//    setTemp_min(calCelisus(response.main.temp_min))\n//     setdescription(response.weather[0].description)\n//     setIcon(weatherIcon.Thunderstorm)\n//    getIcon(weatherIcon,response.weather[0].id)\n//    }\n//    else{\n//      setError(true);\n//    }\n//   }\n   \n \n \n  \n  \n//   return (\n//     <div className=\"App\">\n     \n//       <Form getCity={e=>setC(e)} getCountry={e=>setCo(e)}  error={error}/>\n//       <GetWeather v1={c} v2={co}/>\n//       <Weather city={city} country={country} \n//       temp_celisus={celisus}\n//       temp_max={temp_max}\n//       temp_min={temp_min}\n//       decription={decription}\n//       weathericon={icon}\n//        />\n      \n//     </div>\n//   )\n// }\n\n// export default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}